apply from: '../execWait.gradle'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'maven'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import org.ajoberstar.grgit.Grgit


sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
        classpath('org.ajoberstar:gradle-git:1.1.0')
	    classpath('com.bmuschko:gradle-docker-plugin:2.6')
    }
}

ext {
    groupId = 'com.barclaycard'
    artifactId = 'helloworld'
    artifactVersion = System.getenv()['BUILD_NUMBER'] ?:  '0.0.1'
    nexusUrl = 'http://bukt-nexus.equalexperts.com/nexus'
    (nexusUser, nexusPassword) = System.getenv()['NEXUS_LOGIN'] ? System.getenv()['NEXUS_LOGIN'].split(':') : ["", ""]
}

jar {
    baseName = artifactId
    version = artifactVersion
}

distributions {
    main {
        baseName = artifactId
        version = artifactVersion
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile ("org.json:json:20150729")
    compile 'com.mixpanel:mixpanel-java:1.4.3'

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task stopApp << {
    def port = System.getProperty("serverPort") ?: "8888"
    def cmd = "lsof -Fp -i :${port}"
    def process = cmd.execute()
    process.in.eachLine { line ->
        def killProcess = "kill -9 ${line.substring(1)}".execute()
        killProcess.waitFor()
    }
}

task startApp(type: ExecWait) {
    location System.getProperty("fatJarLocation", jar.archivePath.absolutePath)
    port System.getProperty("serverPort")
}

task createGitProperties << {
    def repo = Grgit.open(project.file('../'))
    def dir = new File(project.buildDir, "resources/main")
    def file = new File(project.buildDir, "resources/main/git.properties")
    if (!dir.exists()) {
        dir.mkdirs()
    }
    if (!file.exists()) {
        file.createNewFile()
    }
    def map = ["git.branch"                : repo.branch.current.name,
               "git.commit.id"             : repo.head().id,
               "git.commit.time"           : repo.head().getDate().format("yyyyMMdd-HHmmss")
    ]
    def props = new Properties()
    props.putAll(map)
    props.store(file.newWriter(), "")
}

project.ext.jenkinsBuildNumber = System.getenv("BUILD_NUMBER") == null ? "local" : System.getenv("BUILD_NUMBER")

project.tasks.jar.dependsOn(createGitProperties)

// Docker stuff
task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from       "java:8"
    maintainer 'Equal Experts "barclaycard@equalexperts.com"'
    runCommand "groupadd -r bukt && useradd -r -g bukt bukt"
    runCommand "mkdir -p /opt/app /opt/app/lib /opt/app/conf"
    user       "bukt"
    copyFile   "${artifactId}-${artifactVersion}.jar", "/opt/app/lib/"
    entryPoint "java", "-Dspring.config.location=/opt/app/conf/app.yml", "-jar", "/opt/app/lib/${artifactId}-${artifactVersion}.jar"
    exposePort 9090
}

task distTarGz(type: Tar) {
    description "Creates a tar.gz file that contains fat jar and Dockerfile"
    dependsOn createDockerfile
    compression = compression.GZIP
    extension = 'tar.gz'
    from("$project.buildDir/libs") {
        include("**/*.jar")
    }
    from("$project.buildDir/docker") {
        include("**/Dockerfile")
    }

}

// maven-publish
apply plugin: 'maven-publish'
group groupId

publishing {
    publications {
        myPublication(MavenPublication) {
            artifactId  artifactId
            version     artifactVersion

            artifact ("${project.buildDir}/distributions/${artifactId}-${artifactVersion}.tar.gz") {
                extension  = 'tar.gz'
            }
        }
    }
    // telling gradle to publish artifact to Nexus
    repositories {
        maven {
            url "${nexusUrl}/content/repositories/bukt-build-artifacts"
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
    }
}
// maven-publish


import org.ajoberstar.grgit.Grgit

apply from: '../execWait.gradle'

buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
        classpath('org.ajoberstar:gradle-git:1.1.0')
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'

ext {
    artifactsName = 'collections-hello-world'
    artifactsVersion = '0.0.2-SNAPSHOT'
}

jar {
    baseName = artifactsName
    version = artifactsVersion
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    wro
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")


    wroRuntime("ro.isdc.wro4j:wro4j-core:1.7.7")
    wroRuntime("ro.isdc.wro4j:wro4j-extensions:1.7.7")
    wroRuntime("org.mockito:mockito-core:1.10.19")
    wroRuntime("args4j:args4j:2.32")
    wroRuntime files("$projectDir/gradlelibs/wro4j-runner-1.7.7.jar")
    wroRuntime("org.webjars:bootstrap:3.2.0")
    wroRuntime("org.webjars:respond:1.4.2")
    wroRuntime("org.webjars:html5shiv:3.7.3")

    testCompile("org.springframework.boot:spring-boot-starter-test")

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stopApp << {
    def port = System.getProperty("serverPort") ?: "8888"
    def cmd = "lsof -Fp -i :${port}"
    def process = cmd.execute()
    process.in.eachLine { line ->
        def killProcess = "kill -9 ${line.substring(1)}".execute()
        killProcess.waitFor()
    }
}

task startApp(type: ExecWait) {
    location System.getProperty("fatJarLocation", jar.archivePath.absolutePath)
    port System.getProperty("serverPort")
}

task createGitProperties << {
    def repo = Grgit.open(project.file('../'))
    def dir = new File(project.buildDir, "resources/main")
    def file = new File(project.buildDir, "resources/main/git.properties")
    if (!dir.exists()) {
        dir.mkdirs()
    }
    if (!file.exists()) {
        file.createNewFile()
    }
    def map = ["git.branch"                : repo.branch.current.name,
               "git.commit.id"             : repo.head().id,
               "git.commit.time"           : repo.head().getDate().format("yyyyMMdd-HHmmss")]
    def props = new Properties()
    props.putAll(map)
    props.store(file.newWriter(), "")
}

task genStatic(type: JavaExec) {
    classpath = sourceSets.wro.runtimeClasspath + sourceSets.main.compileClasspath
    main = "ro.isdc.wro.runner.Wro4jCommandLineRunner"
    args "--contextFolder=$projectDir/src/main/wro", "--wroFile=$projectDir/src/main/wro/wro.xml", "--wroConfigurationFile=$projectDir/src/main/wro/wro.properties", "--destinationFolder=$projectDir/build/resources/main/static/css", "-m"
    systemProperty "project.basedir", "$projectDir"
}


project.tasks.jar.dependsOn(createGitProperties)
assemble.dependsOn(genStatic)

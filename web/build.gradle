import org.ajoberstar.grgit.Grgit

buildscript {
    ext {
        springBootVersion = '1.3.0.M2'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
        classpath('org.ajoberstar:gradle-git:1.1.0')
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'

ext {
    artifactsName = 'barclaycard-collections-ui'
    artifactsVersion = '0.0.1-SNAPSHOT'
}

jar {
    baseName = artifactsName
    version = artifactsVersion
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url "http://repo.spring.io/milestone"
    }
    jcenter()
}



sourceSets {
    wro
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("com.equalexperts:opslogger:0.3.0")

    wroRuntime("ro.isdc.wro4j:wro4j-core:1.7.7")
    wroRuntime("ro.isdc.wro4j:wro4j-extensions:1.7.7")
    wroRuntime("org.mockito:mockito-core:1.10.19")
    wroRuntime("args4j:args4j:2.32")
    wroRuntime files("$projectDir/gradlelibs/wro4j-runner-1.7.7.jar")
    wroRuntime("org.webjars:bootstrap:3.2.0")
    wroRuntime("org.webjars:respond:1.4.2")
    wroRuntime("org.webjars:html5shiv:3.7.3")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.equalexperts:opslogger-support:0.3.0")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

//springBoot {
//    executable = true
//    embeddedLaunchScript = file("linux-init-script.sh")
//}

//task createGitProperties << {
//    def repo = Grgit.open(project.file('../'))
//    def dir = new File(project.buildDir, "resources/main")
//    def file = new File(project.buildDir, "resources/main/git.properties")
//    if (!dir.exists()) {
//        dir.mkdirs()
//    }
//    if (!file.exists()) {
//        file.createNewFile()
//    }
//    def map = ["git.branch"                : repo.branch.current.name,
//               "git.commit.id"             : repo.head().id,
//               "git.commit.time"           : repo.head().getDate().format("yyyyMMdd-HHmmss")]
//    def props = new Properties()
//    props.putAll(map)
//    props.store(file.newWriter(), "")
//}

task genStatic(type: JavaExec) {
    classpath = sourceSets.wro.runtimeClasspath + sourceSets.main.compileClasspath
    main = "ro.isdc.wro.runner.Wro4jCommandLineRunner"
    args "--contextFolder=$projectDir/src/main/wro", "--wroFile=$projectDir/src/main/wro/wro.xml", "--wroConfigurationFile=$projectDir/src/main/wro/wro.properties", "--destinationFolder=$projectDir/src/main/resources/static/css", "-m"
    systemProperty "project.basedir", "$projectDir"
}


//task createDist(type: Tar, dependsOn: 'bootRepackage') {
//    outputs.upToDateWhen { false }
//    from ('src/main/dist/scripts') { fileMode = 0744 }
//    from ('build/libs') {
//        exclude '*.original'
//    }
//    from ('src/main/resources') {
//        include 'application.yaml'
//    }
//    baseName = artifactsName
//    version = artifactsVersion
//}

//project.tasks.jar.dependsOn(createGitProperties)
assemble.dependsOn(genStatic)
